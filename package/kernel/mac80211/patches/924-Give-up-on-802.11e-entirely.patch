From 340a4549fbdc21158ed4a2e66a578bfad41f911f Mon Sep 17 00:00:00 2001
From: Dave Taht <dave.taht@bufferbloat.net>
Date: Thu, 15 May 2014 23:10:57 -0700
Subject: [PATCH] Give up on 802.11e entirely

Packet aggregation works better than 802.11e in the general case.
However in this case we are disabling it due to a persistent and thus
far untrackable bug that has held up the release for 4 months.
---
 net/wireless/util.c |   97 +--------------------------------------------------
 1 file changed, 1 insertion(+), 96 deletions(-)

diff --git a/net/wireless/util.c b/net/wireless/util.c
index 4d1dce4..a64aeab 100644
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -688,106 +688,11 @@ void ieee80211_amsdu_to_8023s(struct sk_buff *skb, struct sk_buff_head *list,
 }
 EXPORT_SYMBOL(ieee80211_amsdu_to_8023s);
 
-static u8 dscp_table[] = {  
-	0, /* BE = 0x0 */  
-	0, /* Max-Reliability = 0x1 */  
-	3, /* Max-Throughput = 0x2 */  
-	0, /* 0x3 Undefined */  
-	5, /* Min-Delay = 0x4 */  
-	0, /* 0x5 Undefined */  
-	0, /* 0x6 Undefined */  
-	0, /* 0x7 Undefined */  
-	1, /* CS1 = 0x8 */  
-	0, /* 0x9 Undefined */  
-	3, /* AF11 = 0xa */  
-	0, /* 0xb Undefined */  
-	3, /* AF12 = 0xc */  
-	0, /* 0xd Undefined */  
-	3, /* AF13 = 0xe */  
-	0, /* 0xf Undefined */  
-	2, /* CS2 = 0x10 */  
-	0, /* 0x11 Undefined */  
-	3, /* AF21 = 0x12 */  
-	0, /* 0x13 Undefined */  
-	3, /* AF22 = 0x14 */  
-	0, /* 0x15 Undefined */  
-	3, /* AF23 = 0x16 */  
-	0, /* 0x17 Undefined */  
-	4, /* CS3 = 0x18 */  
-	0, /* 0x19 Undefined */  
-	3, /* AF31 = 0x1a */  
-	0, /* 0x1b Undefined */  
-	3, /* AF32 = 0x1c */  
-	0, /* 0x1d Undefined */  
-	3, /* AF33 = 0x1e */  
-	0, /* 0x1f Undefined */  
-	5, /* CS4 = 0x20 */  
-	0, /* 0x21 Undefined */  
-	5, /* AF41 = 0x22 */  
-	0, /* 0x23 Undefined */  
-	5, /* AF42 = 0x24 */  
-	0, /* 0x25 Undefined */  
-	4, /* AF43 = 0x26 */  
-	0, /* 0x27 Undefined */  
-	5, /* CS5 = 0x28 */  
-	0, /* 0x29 Undefined */  
-	0, /* 0x2a Undefined */  
-	0, /* 0x2b Undefined */  
-	4, /* VA = 0x2c */  
-	0, /* 0x2d Undefined */  
-	5, /* EF = 0x2e */  
-	0, /* 0x2f Undefined */  
-	5, /* CS6 = 0x30 */  
-	0, /* 0x31 Undefined */  
-	0, /* 0x32 Undefined */  
-	0, /* 0x33 Undefined */  
-	0, /* 0x34 Undefined */  
-	0, /* 0x35 Undefined */  
-	0, /* 0x36 Undefined */  
-	0, /* 0x37 Undefined */  
-	5, /* CS7 = 0x38 */  
-	0, /* 0x39 Undefined */  
-	0, /* 0x3a Undefined */  
-	0, /* 0x3b Undefined */  
-	0, /* 0x3c Undefined */  
-	0, /* 0x3d Undefined */  
-	0, /* 0x3e Undefined */  
-	0, /* 0x3f Undefined */  
- };  
-
 /* Given a data frame determine the 802.1p/1d tag to use. */
 unsigned int cfg80211_classify8021d(struct sk_buff *skb,
 				    struct cfg80211_qos_map *qos_map)
 {
-	unsigned int dscp;
-
-	switch (skb->protocol) {
-	case htons(ETH_P_IP):
-		dscp = ipv4_get_dsfield(ip_hdr(skb)) & 0xfc;
-		break;
-	case htons(ETH_P_IPV6):
-		dscp = ipv6_get_dsfield(ipv6_hdr(skb)) & 0xfc;
-		break;
-	default:
-		return 0;
-	}
-
-	if (qos_map) {
-		unsigned int i, tmp_dscp = dscp >> 2;
-
-		for (i = 0; i < qos_map->num_des; i++) {
-			if (tmp_dscp == qos_map->dscp_exception[i].dscp)
-				return qos_map->dscp_exception[i].up;
-		}
-
-		for (i = 0; i < 8; i++) {
-			if (tmp_dscp >= qos_map->up[i].low &&
-			    tmp_dscp <= qos_map->up[i].high)
-				return i;
-		}
-	}
-
-	return dscp_table[dscp>>2];
+	return 0;
 }
 EXPORT_SYMBOL(cfg80211_classify8021d);
 
-- 
1.7.9.5

